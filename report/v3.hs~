-- Variation 3 - output

data Term = Con Int | Div Term Term deriving (Show)
type M a = (Output,a)
type Output = String

eval :: Term -> M Int
eval (Con a) = (line (Con a) a, a)
eval (Div t u) = let (x,a) = eval t in
		 let (y,b) = eval u in
--		 (x ++ y ++ line (Div t u) (a `div` b), a `div` b)
		 (line (Div t u) (a `div` b) ++ y ++ x, a `div` b)

line :: Term -> Int -> Output
line t a = "eval(" ++ show t ++ ") = " ++ show a ++ " \n "
