-- Variation 3, revised - output

data Term = Con Int | Div Term Term deriving (Show)
type M a = (Output,a)
type Output = String

unit :: a -> M a
unit a = ("",a)

(>>==) :: M a -> (a -> M b) -> M b
m >>== k = let (x,a) = m in
	   let (y,b) = k a in
	   (x ++ y,b)

line :: Term -> Int -> Output
line t a = "eval(" ++ show t ++ ") = " ++ show a ++ " \n "

out :: Output -> M ()
out x = (x,())

eval :: Term -> M Int
eval (Con a) = out (line (Con a) a) >>== \() -> unit a
eval (Div t u) = eval t >>== \a -> eval u >>== \b -> unit (a `div` b)
