-- Variation 0, revised - evaluator

import Prelude (>>=)

data Term = Con Int | Div Term Term deriving (Show)
type M a = a

unit :: a -> a
unit a = a

(>>=) :: M a -> (a -> M b) -> M b
a >>= k = k a

eval :: Term -> M Int
eval (Con a) = unit a
eval (Div t u) = eval t >>= \a -> eval u >>= \b -> unit (a `div` b)
